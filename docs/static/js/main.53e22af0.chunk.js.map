{"version":3,"sources":["AddCategory.js","helpers/getGifs.js","GifGridItem.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"kNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAiB5C,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBACFC,QAAQC,IAAI,gBACRN,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAKlB,SAEI,uBACIS,KAAK,OACLC,MAAOX,EACPY,SAnBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,aAyB/Bd,EAAYiB,UAAY,CACpBhB,c,OAAeiB,EAAUC,KAAKC,Y,oCCjCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1ChB,QAAQC,IAAIqB,GAdO,kBAeZA,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/B2B,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDX0BK,CAAa1B,GAAjCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAcrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OAECoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,aADA,CACC,EAAD,eAGQA,GAFCA,EAAIC,aE7BxBgB,EAAe,WAAO,IAAD,EAEM/C,mBAAS,CAAC,gBAFhB,mBAEvBgD,EAFuB,KAEXjD,EAFW,KAY9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAGQiD,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAYA,GADPA,YCtBjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.53e22af0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('') // inputValue = ''\r\n    const handlerInputValue = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handlerSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"Submit hecho\");\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handlerSubmit}>\r\n            {/* <h1>{inputValue}</h1> */}\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handlerInputValue}\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Mr0qE6qCU2n2utYYG3V2SXDHJBYFIYst`\r\n    const resp = await fetch(url)\r\n    // destructuraciÃ³n\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    console.log(gifs)\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from './hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n// import { getGifs } from './helpers/getGifs'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    // data: images => es el nombre que se le quiere dar\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    // useEffect(() => {\r\n    //     // Se ejecuta esta instruccion cuando el componente es renderizado pro primera vez\r\n    //     getGifs(category) // funcion del helpers\r\n    //         .then(setImages)\r\n    //         // .then( (imgs) => setImages(imgs))\r\n    //     // Si la category cambia se vuelve a ejecutar useEffect\r\n    //     }, [category] /* Arreglo de dependencias*/)\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            \r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(img => (\r\n                        // Los parentesis hacen qeu sea un return implicito\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            // spredth\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from './../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category]) // Siempre va un arreglo\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n    const handlerAdd = (e) => {\r\n        // Spread extrae todos los elementos\r\n        // setCategories([...categories, 'Hunter'])\r\n        // dentro del setCategories recibe tambien un callback\r\n        setCategories(cats => [...cats, 'Hunter'])\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            {/* <button onClick={handlerAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    // El key no tiene qeu ser el indice y debe ser unico\r\n                    categories.map(category => \r\n                        <GifGrid \r\n                            key={category}\r\n                            category= { category }\r\n                        />)\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp'\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}